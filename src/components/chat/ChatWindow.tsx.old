'use client';

import React, { useState, useRef, useEffect } from 'react';
import { Send, Sparkles, Menu, Plus, Clock, Zap, Moon, Sun, Paperclip, X, FileText, File, Cpu, Cloud } from 'lucide-react';
import { api } from '@/lib/api';

// Types
interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  files?: UploadedFile[];
}

interface Conversation {
  id: string;
  title: string;
  timestamp: Date;
}

interface UploadedFile {
  id: string;
  name: string;
  size: number;
  type: string;
  url?: string;
}

type ModelType = 'local' | 'api';

// Typing Indicator Component
const TypingIndicator = () => (
  <div className="flex items-center gap-1 px-4 py-3 bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 rounded-2xl max-w-[100px] shadow-sm">
    <div className="flex gap-1">
      {[0, 1, 2].map((i) => (
        <div
          key={i}
          className="w-2 h-2 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full animate-bounce"
          style={{
            animationDelay: `${i * 0.15}s`,
            animationDuration: '1s'
          }}
        />
      ))}
    </div>
  </div>
);

// File Preview Component
const FilePreview = ({ file, onRemove }: { file: UploadedFile; onRemove: () => void }) => {
  const getFileIcon = () => {
    if (file.type.startsWith('image/')) return <FileText className="w-5 h-5" />;
    if (file.type.includes('pdf')) return <FileText className="w-5 h-5" />;
    return <File className="w-5 h-5" />;
  };

  const formatSize = (bytes: number) => {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
  };

  return (
    <div className="relative group flex items-center gap-2 bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 px-3 py-2 rounded-lg border border-purple-200 dark:border-purple-800">
      <div className="text-purple-600 dark:text-purple-400">
        {getFileIcon()}
      </div>
      <div className="flex-1 min-w-0">
        <p className="text-xs font-medium text-gray-700 dark:text-gray-300 truncate">
          {file.name}
        </p>
        <p className="text-xs text-gray-500 dark:text-gray-400">
          {formatSize(file.size)}
        </p>
      </div>
      <button
        onClick={onRemove}
        className="flex-shrink-0 p-1 hover:bg-red-100 dark:hover:bg-red-900/30 rounded-full transition-colors"
      >
        <X className="w-4 h-4 text-red-500" />
      </button>
    </div>
  );
};

// Model Selector Component
const ModelSelector = ({ 
  currentModel, 
  onModelChange 
}: { 
  currentModel: ModelType; 
  onModelChange: (model: ModelType) => void;
}) => (
  <div className="flex items-center gap-2 bg-white dark:bg-gray-800 rounded-xl p-1 shadow-md border border-gray-200 dark:border-gray-700">
    <button
      onClick={() => onModelChange('local')}
      className={`flex items-center gap-2 px-3 py-2 rounded-lg transition-all duration-200 ${
        currentModel === 'local'
          ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg'
          : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
      }`}
    >
      <Cpu className="w-4 h-4" />
      <span className="text-sm font-medium">مؤيد</span>
    </button>
    <button
      onClick={() => onModelChange('api')}
      className={`flex items-center gap-2 px-3 py-2 rounded-lg transition-all duration-200 ${
        currentModel === 'api'
          ? 'bg-gradient-to-r from-purple-500 to-blue-500 text-white shadow-lg'
          : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
      }`}
    >
      <Cloud className="w-4 h-4" />
      <span className="text-sm font-medium">نموذج سحابي</span>
    </button>
  </div>
);

// About Modal Component
const AboutModal = ({ isOpen, onClose }: { isOpen: boolean; onClose: () => void }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="sticky top-0 bg-gradient-to-r from-purple-600 to-blue-600 p-6 rounded-t-2xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-white rounded-full flex items-center justify-center">
                <Sparkles className="w-6 h-6 text-purple-600" />
              </div>
              <div>
                <h2 className="text-2xl font-bold text-white">عن المشروع</h2>
                <p className="text-purple-100 text-sm">Oqool AI - نظام محادثة ذكي</p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="p-2 hover:bg-white/20 rounded-lg transition-colors"
            >
              <X className="w-6 h-6 text-white" />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6" dir="rtl">
          {/* University Info */}
          <div className="bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 rounded-xl p-6 border border-purple-200 dark:border-purple-800">
            <h3 className="text-lg font-bold text-purple-900 dark:text-purple-300 mb-3 flex items-center gap-2">
              🎓 جامعة العين - Al Ain University
            </h3>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed mb-4">
              تم تطوير هذا المشروع في <strong>مختبرات الذكاء الاصطناعي</strong> بجامعة العين في إطار الأبحاث المتقدمة في مجال معالجة اللغة الطبيعية والتعلم الآلي.
            </p>
            <div className="flex items-center gap-2 text-sm text-purple-600 dark:text-purple-400">
              <Zap className="w-4 h-4" />
              <span>مشروع بحثي أكاديمي - 2024/2025</span>
            </div>
          </div>

          {/* Project Description */}
          <div>
            <h3 className="text-lg font-bold text-gray-900 dark:text-gray-100 mb-3">
              📋 نبذة عن المشروع
            </h3>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              <strong>Oqool AI</strong> هو نظام محادثة ذكي متقدم يهدف إلى تطوير تقنيات الذكاء الاصطناعي العربية. يدعم النظام نموذجين من التشغيل:
            </p>
            <div className="mt-3 space-y-2">
              <div className="flex items-start gap-3 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
                <Cpu className="w-5 h-5 text-green-600 dark:text-green-400 mt-0.5" />
                <div>
                  <p className="font-medium text-green-900 dark:text-green-300">نموذج محلي (مؤيد - Muayad)</p>
                  <p className="text-sm text-green-700 dark:text-green-400">يعمل على الخوادم المحلية للجامعة</p>
                </div>
              </div>
              <div className="flex items-start gap-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                <Cloud className="w-5 h-5 text-blue-600 dark:text-blue-400 mt-0.5" />
                <div>
                  <p className="font-medium text-blue-900 dark:text-blue-300">نموذج سحابي (API)</p>
                  <p className="text-sm text-blue-700 dark:text-blue-400">متصل بنماذج ذكاء اصطناعي متقدمة</p>
                </div>
              </div>
            </div>
          </div>

          {/* Development Team */}
          <div>
            <h3 className="text-lg font-bold text-gray-900 dark:text-gray-100 mb-3">
              👥 فريق التطوير
            </h3>
            <div className="space-y-3">
              <div className="p-4 bg-gray-50 dark:bg-gray-700/50 rounded-xl">
                <p className="font-medium text-gray-900 dark:text-gray-100 mb-1">
                  د. [اسم المشرف الأكاديمي]
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  مشرف المشروع - قسم علوم الحاسوب
                </p>
              </div>
              <div className="p-4 bg-gray-50 dark:bg-gray-700/50 rounded-xl">
                <p className="font-medium text-gray-900 dark:text-gray-100 mb-1">
                  [اسم الطالب 1]
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  مطور رئيسي - تخصص الذكاء الاصطناعي
                </p>
              </div>
              <div className="p-4 bg-gray-50 dark:bg-gray-700/50 rounded-xl">
                <p className="font-medium text-gray-900 dark:text-gray-100 mb-1">
                  [اسم الطالب 2]
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  مطور مساعد - تخصص هندسة البرمجيات
                </p>
              </div>
            </div>
          </div>

          {/* Technologies */}
          <div>
            <h3 className="text-lg font-bold text-gray-900 dark:text-gray-100 mb-3">
              🛠️ التقنيات المستخدمة
            </h3>
            <div className="grid grid-cols-2 gap-2">
              {['React & Next.js', 'FastAPI', 'Machine Learning', 'Natural Language Processing', 'PyTorch', 'Transformers'].map((tech) => (
                <div key={tech} className="px-3 py-2 bg-gradient-to-r from-purple-100 to-blue-100 dark:from-purple-900/30 dark:to-blue-900/30 rounded-lg text-center text-sm font-medium text-gray-700 dark:text-gray-300">
                  {tech}
                </div>
              ))}
            </div>
          </div>

          {/* Footer */}
          <div className="pt-4 border-t border-gray-200 dark:border-gray-700 text-center">
            <p className="text-xs text-gray-500 dark:text-gray-400">
              © 2024-2025 جامعة العين - جميع الحقوق محفوظة
            </p>
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
              Al Ain University - AI Research Labs
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

const MessageBubble = ({ message }: { message: Message }) => {
  const isUser = message.role === 'user';
  
  return (
    <div
      className={`flex gap-3 mb-4 animate-fadeIn ${isUser ? 'flex-row-reverse' : 'flex-row'}`}
      style={{
        animation: 'fadeIn 0.3s ease-out'
      }}
    >
      {/* Avatar */}
      <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center shadow-lg ${
        isUser 
          ? 'bg-gradient-to-br from-purple-500 to-pink-500' 
          : 'bg-gradient-to-br from-blue-500 to-cyan-500'
      }`}>
        {isUser ? (
          <span className="text-white font-bold text-sm">أنت</span>
        ) : (
          <Sparkles className="w-5 h-5 text-white" />
        )}
      </div>

      {/* Message Content */}
      <div className={`flex flex-col max-w-[70%] ${isUser ? 'items-end' : 'items-start'}`}>
        {/* Files if any */}
        {message.files && message.files.length > 0 && (
          <div className="mb-2 space-y-1">
            {message.files.map((file) => (
              <div key={file.id} className="text-xs bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm px-3 py-2 rounded-lg border border-gray-200 dark:border-gray-700">
                📎 {file.name}
              </div>
            ))}
          </div>
        )}
        
        {/* Message Text */}
        <div
          className={`px-4 py-3 rounded-2xl shadow-md hover:shadow-lg transition-all duration-300 ${
            isUser
              ? 'bg-gradient-to-br from-purple-500 to-pink-500 text-white rounded-br-sm'
              : 'bg-white dark:bg-gray-800 text-gray-800 dark:text-white rounded-bl-sm border border-gray-100 dark:border-gray-700'
          }`}
        >
          <p className="text-sm leading-relaxed whitespace-pre-wrap">{message.content}</p>
        </div>
        <span className="text-xs text-gray-500 dark:text-gray-400 mt-1 px-2">
          {message.timestamp.toLocaleTimeString('ar-SA', { hour: '2-digit', minute: '2-digit' })}
        </span>
      </div>
    </div>
  );
};

// Sidebar Component
const Sidebar = ({ 
  conversations, 
  onNewChat, 
  isOpen,
  onShowAbout
}: { 
  conversations: Conversation[]; 
  onNewChat: () => void; 
  isOpen: boolean;
  onShowAbout: () => void;
}) => (
  <div className={`fixed right-0 top-0 h-full bg-white dark:bg-gray-900 shadow-2xl transition-transform duration-300 z-50 ${
    isOpen ? 'translate-x-0' : 'translate-x-full'
  } w-80 border-l border-gray-200 dark:border-gray-700 flex flex-col`}>
    {/* Sidebar Header */}
    <div className="p-6 border-b border-gray-200 dark:border-gray-700">
      <button
        onClick={onNewChat}
        className="w-full px-4 py-3 bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-xl font-medium shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200 flex items-center justify-center gap-2"
      >
        <Plus className="w-5 h-5" />
        <span>محادثة جديدة</span>
      </button>
    </div>

    {/* Conversations List */}
    <div className="flex-1 p-4 overflow-y-auto">
      <h3 className="text-sm font-semibold text-gray-500 dark:text-gray-400 mb-3 px-2">
        المحادثات السابقة
      </h3>
      <div className="space-y-2">
        {conversations.map((conv) => (
          <button
            key={conv.id}
            className="w-full p-3 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-200 text-right group"
          >
            <div className="flex items-center justify-between">
              <Clock className="w-4 h-4 text-gray-400 group-hover:text-purple-500 transition-colors" />
              <p className="font-medium text-sm text-gray-800 dark:text-gray-200 truncate flex-1 mr-2">
                {conv.title}
              </p>
            </div>
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
              {conv.timestamp.toLocaleDateString('ar-SA')}
            </p>
          </button>
        ))}
      </div>
    </div>

    {/* About Section - Fixed at bottom */}
    <div className="p-4 border-t border-gray-200 dark:border-gray-700 bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20">
      <button
        onClick={onShowAbout}
        className="w-full text-right p-3 rounded-xl hover:bg-white/50 dark:hover:bg-gray-800/50 transition-all"
      >
        <p className="text-xs font-bold text-purple-600 dark:text-purple-400 mb-1">
          🎓 مطوّر في جامعة العين
        </p>
        <p className="text-xs text-gray-600 dark:text-gray-400">
          مختبرات الذكاء الاصطناعي
        </p>
      </button>
    </div>
  </div>
);

// Main Chat Window Component
export default function ChatWindow() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: 'مرحباً! أنا Oqool AI 🎓 نظام محادثة ذكي مطوّر في جامعة العين. يمكنك اختيار النموذج المحلي (مؤيد - Muayad) أو النموذج السحابي، كما يمكنك إرفاق ملفات! 🚀',
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [isDark, setIsDark] = useState(false);
  const [selectedModel, setSelectedModel] = useState<ModelType>('api');
  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);
  const [isDragging, setIsDragging] = useState(false);
  const [showAbout, setShowAbout] = useState(false);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const conversations: Conversation[] = [
    { id: '1', title: 'محادثة عن البرمجة', timestamp: new Date(2024, 9, 6) },
    { id: '2', title: 'أسئلة تقنية', timestamp: new Date(2024, 9, 5) },
    { id: '3', title: 'مساعدة في المشروع', timestamp: new Date(2024, 9, 4) }
  ];

  // Auto scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, isTyping]);

  // Handle dark mode
  useEffect(() => {
    if (isDark) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [isDark]);

  // Handle file upload
  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files) return;

    const newFiles: UploadedFile[] = Array.from(files).map(file => ({
      id: Date.now().toString() + Math.random(),
      name: file.name,
      size: file.size,
      type: file.type,
      url: URL.createObjectURL(file)
    }));

    setUploadedFiles(prev => [...prev, ...newFiles]);
  };

  // Handle drag and drop
  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);

    const files = e.dataTransfer.files;
    if (!files) return;

    const newFiles: UploadedFile[] = Array.from(files).map(file => ({
      id: Date.now().toString() + Math.random(),
      name: file.name,
      size: file.size,
      type: file.type,
      url: URL.createObjectURL(file)
    }));

    setUploadedFiles(prev => [...prev, ...newFiles]);
  };

  // Remove file
  const removeFile = (fileId: string) => {
    setUploadedFiles(prev => prev.filter(f => f.id !== fileId));
  };

  // Handle send message
  const handleSend = async () => {
    if (!inputValue.trim() && uploadedFiles.length === 0) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: inputValue || '📎 ملفات مرفقة',
      timestamp: new Date(),
      files: uploadedFiles.length > 0 ? [...uploadedFiles] : undefined
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setUploadedFiles([]);
    setIsTyping(true);

    try {
      // Map 'api' to 'cloud' for backend
      const modelTypeForApi = selectedModel === 'api' ? 'cloud' : 'local';
      
      const response = await api.sendMessage(
        userMessage.content,
        undefined, // conversation_id (we'll manage this later)
        undefined, // model (use default)
        modelTypeForApi
      );

      // Add assistant response
      const aiMessage: Message = {
        id: response.assistant_message.id,
        role: 'assistant',
        content: response.assistant_message.content,
        timestamp: new Date(response.assistant_message.created_at)
      };
      
      setMessages(prev => [...prev, aiMessage]);
    } catch (error) {
      console.error('Error sending message:', error);
      // Show error message to user
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: 'عذراً، حدث خطأ في إرسال الرسالة. يرجى المحاولة مرة أخرى.',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  return (
    <>
      <div className="flex h-screen bg-gradient-to-br from-gray-50 via-purple-50/30 to-blue-50/30 dark:from-gray-900 dark:via-purple-900/10 dark:to-blue-900/10">
        {/* About Modal */}
        <AboutModal isOpen={showAbout} onClose={() => setShowAbout(false)} />

        {/* Sidebar */}
        <Sidebar 
          conversations={conversations}
          onNewChat={() => setMessages([messages[0]])}
          isOpen={isSidebarOpen}
          onShowAbout={() => setShowAbout(true)}
        />

        {/* Overlay */}
        {isSidebarOpen && (
          <div 
            className="fixed inset-0 bg-black/50 z-40 backdrop-blur-sm"
            onClick={() => setIsSidebarOpen(false)}
          />
        )}

        {/* Main Chat Area */}
        <div className="flex-1 flex flex-col">
          {/* Header */}
          <div className="bg-white/80 dark:bg-gray-900/80 backdrop-blur-lg border-b border-gray-200 dark:border-gray-700 shadow-sm">
            <div className="max-w-4xl mx-auto px-6 py-4">
              <div className="flex items-center justify-between">
                {/* Right Side */}
                <div className="flex items-center gap-3">
                  <button
                    onClick={() => setIsSidebarOpen(!isSidebarOpen)}
                    className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
                  >
                    <Menu className="w-6 h-6 text-gray-600 dark:text-gray-300" />
                  </button>
                  
                  <button
                    onClick={() => setIsDark(!isDark)}
                    className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
                  >
                    {isDark ? (
                      <Sun className="w-5 h-5 text-yellow-500" />
                    ) : (
                      <Moon className="w-5 h-5 text-gray-600" />
                    )}
                  </button>
                </div>

                {/* Center - Title & Model Selector */}
                <div className="flex flex-col items-center gap-2">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
                    <h1 className="text-xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                      Oqool AI
                    </h1>
                    <Zap className="w-5 h-5 text-yellow-500" />
                  </div>
                  <ModelSelector 
                    currentModel={selectedModel} 
                    onModelChange={setSelectedModel}
                  />
                </div>

                {/* Left Side - Spacer */}
                <div className="w-20" />
              </div>
            </div>
          </div>

          {/* Messages Area */}
          <div className="flex-1 overflow-y-auto">
            <div className="max-w-4xl mx-auto px-6 py-6">
              {messages.map((message) => (
                <MessageBubble key={message.id} message={message} />
              ))}
              
              {isTyping && (
                <div className="flex gap-3 mb-4">
                  <div className="flex-shrink-0 w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center shadow-lg">
                    <Sparkles className="w-5 h-5 text-white" />
                  </div>
                  <TypingIndicator />
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>
          </div>

          {/* Input Area */}
          <div 
            className="bg-white/80 dark:bg-gray-900/80 backdrop-blur-lg border-t border-gray-200 dark:border-gray-700 shadow-lg"
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
          >
            <div className="max-w-4xl mx-auto px-6 py-4">
              {/* Uploaded Files Preview */}
              {uploadedFiles.length > 0 && (
                <div className="mb-3 flex flex-wrap gap-2">
                  {uploadedFiles.map((file) => (
                    <FilePreview 
                      key={file.id} 
                      file={file} 
                      onRemove={() => removeFile(file.id)}
                    />
                  ))}
                </div>
              )}

              {/* Drag & Drop Overlay */}
              {isDragging && (
                <div className="absolute inset-0 bg-purple-500/10 backdrop-blur-sm border-2 border-dashed border-purple-500 rounded-2xl flex items-center justify-center z-10">
                  <div className="text-center">
                    <Paperclip className="w-12 h-12 text-purple-500 mx-auto mb-2" />
                    <p className="text-purple-600 dark:text-purple-400 font-medium">
                      اسحب الملفات هنا
                    </p>
                  </div>
                </div>
              )}

              <div className="relative">
                {/* Input Container */}
                <div className="flex items-end gap-3 bg-white dark:bg-gray-800 rounded-2xl shadow-lg border-2 border-gray-200 dark:border-gray-700 focus-within:border-purple-500 dark:focus-within:border-purple-500 transition-all duration-200 p-3">
                  {/* File Upload Button */}
                  <input
                    ref={fileInputRef}
                    type="file"
                    multiple
                    onChange={handleFileSelect}
                    className="hidden"
                  />
                  <button
                    onClick={() => fileInputRef.current?.click()}
                    className="flex-shrink-0 p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors text-gray-600 dark:text-gray-400 hover:text-purple-500 dark:hover:text-purple-400"
                    title="إرفاق ملف"
                  >
                    <Paperclip className="w-5 h-5" />
                  </button>

                  {/* Text Input */}
                  <input
                    ref={inputRef}
                    type="text"
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="اكتب رسالتك هنا..."
                    className="flex-1 bg-transparent text-gray-800 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 outline-none text-sm px-2 py-1"
                    dir="rtl"
                  />
                  
                  {/* Send Button */}
                  <button
                    onClick={handleSend}
                    disabled={!inputValue.trim() && uploadedFiles.length === 0}
                    className="flex-shrink-0 p-3 bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-xl hover:shadow-xl transform hover:scale-105 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                  >
                    <Send className="w-5 h-5" />
                  </button>
                </div>

                {/* Helper Text */}
                <div className="mt-2 flex items-center justify-between text-xs">
                  <p className="text-gray-500 dark:text-gray-400">
                    اضغط Enter للإرسال • Shift+Enter لسطر جديد
                  </p>
                  <button
                    onClick={() => setShowAbout(true)}
                    className="text-purple-600 dark:text-purple-400 hover:underline flex items-center gap-1"
                  >
                    <span>🎓 جامعة العين</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* CSS Animation */}
      <style jsx>{`
        @keyframes fadeIn {
          from {
            opacity: 0;
            transform: translateY(10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        .animate-fadeIn {
          animation: fadeIn 0.3s ease-out;
        }
      `}</style>
    </>
  );
}